# SPDX-FileCopyrightText: 2022 Gregory Clunies <greg@reflekt-ci.com>
#
# SPDX-License-Identifier: Apache-2.0

name: CI

on:
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]

jobs:

  lint:
    name: Lint (${{ matrix.python-version }}, ${{ matrix.os }})
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.11']  # Lint only needs to run once
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Install Poetry
        run: poetry install

      - name: Lint
        run: poetry run make lint

  # lint:
  #   name: Lint (${{ matrix.python-version }}, ${{ matrix.os }})
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: ['ubuntu-latest']
  #       python-version: ['3.11']  # Lint only needs to run once
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Install Python
  #       uses: actions/setup-python@v4
  #       id: setup-python
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true

  #     - name: Load cached venv (if available)
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

  #     - name: Install dependencies (cache not available)
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry install --no-interaction --no-root

  #     - name: Lint
  #       run: |
  #         source .venv/bin/activate
  #         make lint

  # check-license:
  #   needs: lint
  #   name: Lint (${{ matrix.python-version }}, ${{ matrix.os }})
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: ['ubuntu-latest']
  #       python-version: ['3.11']  # Lint only needs to run once
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Install Python
  #       uses: actions/setup-python@v4
  #       id: setup-python
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true

  #     - name: Load cached venv (if available)
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

  #     - name: Install dependencies (cache not available)
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry install --no-interaction --no-root

  #     - name: Check License
  #       run: |
  #         source .venv/bin/activate
  #         make check-license

  # test:
  #   needs: check-license
  #   name: Test (${{ matrix.python-version }}, ${{ matrix.os }})
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: ['ubuntu-latest']
  #       python-version: ['3.9', '3.10', '3.11']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Install Python
  #       uses: actions/setup-python@v4
  #       id: setup-python
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true

  #     - name: Load cached venv (if available)
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

  #     - name: Install dependencies (cache not available)
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry install --no-interaction --no-root

  #     - name: Run Tests
  #       run: |
  #         source .venv/bin/activate
  #         pytest --cov=reflekt tests/
